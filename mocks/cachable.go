// Code generated by MockGen. DO NOT EDIT.
// Source: cacheable_middleware.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
	time "time"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockClientMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockClient)(nil).Do), req)
}

// MockHTTPCacheProvider is a mock of HTTPCacheProvider interface
type MockHTTPCacheProvider struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPCacheProviderMockRecorder
}

// MockHTTPCacheProviderMockRecorder is the mock recorder for MockHTTPCacheProvider
type MockHTTPCacheProviderMockRecorder struct {
	mock *MockHTTPCacheProvider
}

// NewMockHTTPCacheProvider creates a new mock instance
func NewMockHTTPCacheProvider(ctrl *gomock.Controller) *MockHTTPCacheProvider {
	mock := &MockHTTPCacheProvider{ctrl: ctrl}
	mock.recorder = &MockHTTPCacheProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPCacheProvider) EXPECT() *MockHTTPCacheProviderMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockHTTPCacheProvider) Get(arg0 string) (http.Response, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(http.Response)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockHTTPCacheProviderMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPCacheProvider)(nil).Get), arg0)
}

// Set mocks base method
func (m *MockHTTPCacheProvider) Set(arg0 string, arg1 http.Response, arg2 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1, arg2)
}

// Set indicates an expected call of Set
func (mr *MockHTTPCacheProviderMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockHTTPCacheProvider)(nil).Set), arg0, arg1, arg2)
}
